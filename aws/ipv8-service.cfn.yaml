---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'IPv8.net API and Buckets'

Parameters:

  IPv8ApiLambdaName:
    Type: String
    Default: ipv8-api-lambda
    AllowedValues:
      - ipv8-api-lambda

  HostedZoneId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /route53/api.ipv8.net

  WebsiteAcmCertificate:
    Type: String
    Default: arn:aws:acm:us-east-1:565191829006:certificate/3180b37b-620a-4109-b4c9-f0bf88b72d26
    AllowedValues:
      - arn:aws:acm:us-east-1:565191829006:certificate/3180b37b-620a-4109-b4c9-f0bf88b72d26

  ApiAcmCertificate:
    Type: String
    Default: arn:aws:acm:us-east-1:565191829006:certificate/cab5f220-c0b6-48b8-bfbf-b2b3102d3575
    AllowedValues:
      - arn:aws:acm:us-east-1:565191829006:certificate/cab5f220-c0b6-48b8-bfbf-b2b3102d3575

Resources:

  # Lambda
  IPv8ApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Provides the main endpoint for IPv8.net
      FunctionName: !Ref IPv8ApiLambdaName
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Code:
        ZipFile: |
          import json
          import socket

          allowed_origins = [
              "https://www.ipv8.net",
              "https://ipv8.net"
          ]

          def handler(event, context):

              print(event)
              source_ip = event['multiValueHeaders']['X-Forwarded-For'][0].split(", ")[0]
              print(source_ip)

              try:
                  hostname = socket.gethostbyaddr(source_ip)[0]
              except:
                  hostname = source_ip

              response = {
                  'ip': source_ip,
                  'hostname': hostname
              }

              return {
                  'statusCode': 200,
                  'headers': { "Access-Control-Allow-Origin": "*" },
                  'body': json.dumps(response)
              }

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ipv8-lambda-execution-role
      Description: Execution role for the IPv8 Lambda's
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ipv8-lambda-execution-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowLogging
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${IPv8ApiLambdaName}"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${IPv8ApiLambdaName}:log-stream:*"

  MainLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref IPv8ApiLambda
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${IPv8Api}/*/GET/get-ip"

  # REST API
  IPv8Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        info:
          version: 1.0
          title: "IPv8 REST API"
        paths:
          /get-ip:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IPv8ApiLambda.Arn}/invocations"
              responses: {}
        swagger: 2.0

  IPv8ApiProdDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref IPv8Api
      Description: IPv8 REST API Deployment
      StageName: prod

  IPv8ApiAccountSettings:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayRole.Arn

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ipv8-apigateway-role
      Description: Logging role for the IPv8 REST API
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: allow-invoke-ipv8-lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt IPv8ApiLambda.Arn
                Effect: Allow

  # CloudFront
  CloudFrontApiDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: IPv8 API
        Aliases:
          - ipv4.api.ipv8.net
          - ipv6.api.ipv8.net
        IPV6Enabled: true
        Origins:
          - DomainName: !Sub "${IPv8Api}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /prod
            Id: ipv8-api
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        ViewerCertificate:
          AcmCertificateArn: !Ref ApiAcmCertificate
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          DefaultTTL: 0
          ForwardedValues:
            QueryString: false
          TargetOriginId: ipv8-api
          ViewerProtocolPolicy: redirect-to-https

  CloudFrontWebDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: IPv8 Website
        Aliases:
          - ipv8.net
          - www.ipv8.net
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: ipv8-site
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: !Ref WebsiteAcmCertificate
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          DefaultTTL: 0
          ForwardedValues:
            QueryString: false
          TargetOriginId: ipv8-site
          ViewerProtocolPolicy: redirect-to-https

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Identity for ipv8.net"

  # DNS
  DNSApiRecord4:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontApiDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      Name: ipv4.api.ipv8.net
      HostedZoneId: !Ref HostedZoneId
      Type: A

  DNSApiRecord6:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontApiDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      Name: ipv6.api.ipv8.net
      HostedZoneId: !Ref HostedZoneId
      Type: AAAA

  # Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ipv8-website
      WebsiteConfiguration:
        IndexDocument: index.html
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - !Sub "${S3Bucket.Arn}/*"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
          - Action:
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !GetAtt S3Bucket.Arn
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId

  # Misc
  MainLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${IPv8ApiLambdaName}"
      RetentionInDays: 7